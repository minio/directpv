// This file is part of MinIO DirectPV
// Copyright (c) 2022 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/minio/directpv/pkg/apis/directpv.min.io/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDirectPVInitRequests implements DirectPVInitRequestInterface
type FakeDirectPVInitRequests struct {
	Fake *FakeDirectpvV1beta1
}

var directpvinitrequestsResource = v1beta1.SchemeGroupVersion.WithResource("directpvinitrequests")

var directpvinitrequestsKind = v1beta1.SchemeGroupVersion.WithKind("DirectPVInitRequest")

// Get takes name of the directPVInitRequest, and returns the corresponding directPVInitRequest object, and an error if there is any.
func (c *FakeDirectPVInitRequests) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.DirectPVInitRequest, err error) {
	emptyResult := &v1beta1.DirectPVInitRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewRootGetActionWithOptions(directpvinitrequestsResource, name, options), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.DirectPVInitRequest), err
}

// List takes label and field selectors, and returns the list of DirectPVInitRequests that match those selectors.
func (c *FakeDirectPVInitRequests) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.DirectPVInitRequestList, err error) {
	emptyResult := &v1beta1.DirectPVInitRequestList{}
	obj, err := c.Fake.
		Invokes(testing.NewRootListActionWithOptions(directpvinitrequestsResource, directpvinitrequestsKind, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.DirectPVInitRequestList{ListMeta: obj.(*v1beta1.DirectPVInitRequestList).ListMeta}
	for _, item := range obj.(*v1beta1.DirectPVInitRequestList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested directPVInitRequests.
func (c *FakeDirectPVInitRequests) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchActionWithOptions(directpvinitrequestsResource, opts))
}

// Create takes the representation of a directPVInitRequest and creates it.  Returns the server's representation of the directPVInitRequest, and an error, if there is any.
func (c *FakeDirectPVInitRequests) Create(ctx context.Context, directPVInitRequest *v1beta1.DirectPVInitRequest, opts v1.CreateOptions) (result *v1beta1.DirectPVInitRequest, err error) {
	emptyResult := &v1beta1.DirectPVInitRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(directpvinitrequestsResource, directPVInitRequest, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.DirectPVInitRequest), err
}

// Update takes the representation of a directPVInitRequest and updates it. Returns the server's representation of the directPVInitRequest, and an error, if there is any.
func (c *FakeDirectPVInitRequests) Update(ctx context.Context, directPVInitRequest *v1beta1.DirectPVInitRequest, opts v1.UpdateOptions) (result *v1beta1.DirectPVInitRequest, err error) {
	emptyResult := &v1beta1.DirectPVInitRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateActionWithOptions(directpvinitrequestsResource, directPVInitRequest, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.DirectPVInitRequest), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDirectPVInitRequests) UpdateStatus(ctx context.Context, directPVInitRequest *v1beta1.DirectPVInitRequest, opts v1.UpdateOptions) (result *v1beta1.DirectPVInitRequest, err error) {
	emptyResult := &v1beta1.DirectPVInitRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceActionWithOptions(directpvinitrequestsResource, "status", directPVInitRequest, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.DirectPVInitRequest), err
}

// Delete takes name of the directPVInitRequest and deletes it. Returns an error if one occurs.
func (c *FakeDirectPVInitRequests) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(directpvinitrequestsResource, name, opts), &v1beta1.DirectPVInitRequest{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDirectPVInitRequests) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionActionWithOptions(directpvinitrequestsResource, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.DirectPVInitRequestList{})
	return err
}

// Patch applies the patch and returns the patched directPVInitRequest.
func (c *FakeDirectPVInitRequests) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.DirectPVInitRequest, err error) {
	emptyResult := &v1beta1.DirectPVInitRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceActionWithOptions(directpvinitrequestsResource, name, pt, data, opts, subresources...), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1beta1.DirectPVInitRequest), err
}
