// This file is part of MinIO DirectPV
// Copyright (c) 2022 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"context"

	v1beta1 "github.com/minio/directpv/pkg/apis/directpv.min.io/v1beta1"
	scheme "github.com/minio/directpv/pkg/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DirectPVDrivesGetter has a method to return a DirectPVDriveInterface.
// A group's client should implement this interface.
type DirectPVDrivesGetter interface {
	DirectPVDrives() DirectPVDriveInterface
}

// DirectPVDriveInterface has methods to work with DirectPVDrive resources.
type DirectPVDriveInterface interface {
	Create(ctx context.Context, directPVDrive *v1beta1.DirectPVDrive, opts v1.CreateOptions) (*v1beta1.DirectPVDrive, error)
	Update(ctx context.Context, directPVDrive *v1beta1.DirectPVDrive, opts v1.UpdateOptions) (*v1beta1.DirectPVDrive, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, directPVDrive *v1beta1.DirectPVDrive, opts v1.UpdateOptions) (*v1beta1.DirectPVDrive, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta1.DirectPVDrive, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta1.DirectPVDriveList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.DirectPVDrive, err error)
	DirectPVDriveExpansion
}

// directPVDrives implements DirectPVDriveInterface
type directPVDrives struct {
	*gentype.ClientWithList[*v1beta1.DirectPVDrive, *v1beta1.DirectPVDriveList]
}

// newDirectPVDrives returns a DirectPVDrives
func newDirectPVDrives(c *DirectpvV1beta1Client) *directPVDrives {
	return &directPVDrives{
		gentype.NewClientWithList[*v1beta1.DirectPVDrive, *v1beta1.DirectPVDriveList](
			"directpvdrives",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1beta1.DirectPVDrive { return &v1beta1.DirectPVDrive{} },
			func() *v1beta1.DirectPVDriveList { return &v1beta1.DirectPVDriveList{} }),
	}
}
